<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                               http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd">

    <changeSet id="drop-function-on_monitoring_object_property_changes" author="M_Zhivotovskiy">
        <sql splitStatements="false">
            DROP function IF EXISTS "on_monitoring_object_property_changes";
        </sql>
    </changeSet>

    <changeSet id="create-function-on_monitoring_object_property_changes" author="M_Zhivotovskiy">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION public.on_monitoring_object_property_changes()
             RETURNS trigger
             LANGUAGE plpgsql
            AS $function$
                        BEGIN
                    IF (TG_OP = 'DELETE') THEN
                        INSERT INTO monitoring_object_property_changes(property_id, operation, date_time, value, color_id)
                        SELECT OLD.id, TG_OP, now(), OLD.value, OLD.default_colour;
                        INSERT INTO public.monitoring_object_property_archive
                        (id, "name", value, dic_property_type_id, description, entity_id, dic_parameter_id, property_map_id, is_map, dic_type_id, entity_map_id, is_require, dic_value_id, is_measured, measure_unit_id, system_name, is_formula, is_archive, default_colour, is_hide, address_id)
                        VALUES(OLD.id, OLD."name", OLD.value, OLD.dic_property_type_id, OLD.description, OLD.entity_id, OLD.dic_parameter_id, OLD.property_map_id, OLD.is_map, OLD.dic_type_id, OLD.entity_map_id, OLD.is_require, OLD.dic_value_id, OLD.is_measured, OLD.measure_unit_id, OLD.system_name, OLD.is_formula, true, OLD.default_colour, OLD.is_hide, OLD.address_id);

                        update public.rule_sc
                        set is_archive = true
                        WHERE entity_property_sc_id = OLD.id;

                        update public.rule_request
                        set is_archive = true
                        WHERE entity_property_sc_id = OLD.id;

                        RETURN OLD;
                        ELSIF (TG_OP = 'UPDATE') THEN
                        INSERT INTO monitoring_object_property_changes(property_id, operation, date_time, value, color_id)
                        SELECT NEW.id, TG_OP, now(), NEW.value, NEW.default_colour;
                        IF NEW.is_archive = true then
                        delete FROM monitoring_object_property WHERE id = NEW.id;
                        END IF;

                        RETURN NEW;
                        ELSIF (TG_OP = 'INSERT') THEN
                        INSERT INTO monitoring_object_property_changes(property_id, operation, date_time, value, color_id)
                        SELECT NEW.id, TG_OP, now(), NEW.value, NEW.default_colour;
                        RETURN NEW;
                        END IF;
                        RETURN NULL;
                        END;
                        $function$
                        ;
        </sql>
    </changeSet>

</databaseChangeLog>