<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                               http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd">

    <changeSet id="drop-function-on_archive_monitoring_object_entity" author="M_Zhivotovskiy">
        <sql splitStatements="false">
            DROP function IF EXISTS "on_archive_monitoring_object_entity";
        </sql>
    </changeSet>

    <changeSet id="create-function-on_archive_monitoring_object_entity" author="M_Zhivotovskiy">
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION public.on_archive_monitoring_object_entity()
             RETURNS trigger
             LANGUAGE plpgsql
            AS $function$
                        BEGIN

                if TG_OP = 'UPDATE' and new.is_archive = true then
                        delete from monitoring_object_entity where id = new.id;
                        elseif TG_OP = 'DELETE' then
                    INSERT INTO public.monitoring_object_entity_archive
            (id, dic_element_id, "name", client_id, entity_map_id, adapter_map_id, measure_unit_id, is_map_value, autocreate_id, schedule_local, is_hide, is_archive, is_tech_interval, plugin_entity_map_id, plugin_type_entity_id)
            VALUES(old.id, old.dic_element_id, old."name", old.client_id, old.entity_map_id, old.adapter_map_id, old.measure_unit_id, old.is_map_value, old.autocreate_id, old.schedule_local, old.is_hide, old.is_archive, old.is_tech_interval, old.plugin_entity_map_id, old.plugin_type_entity_id);

                        update monitoring_object_property
                        set is_archive = true
                        where entity_id = old.id and is_archive = false ;

                        update public.rule_sc
                        set is_archive = true
                        WHERE is_archive = false and entity_sc_id = old.id or
                                entity_property_sc_id in (select id FROM monitoring_object_property where entity_id = old.id);

                        update public.rule_request
                        set is_archive = true
                        WHERE   is_archive = false  and entity_sc_id = old.id or
                                entity_property_sc_id in (select id FROM monitoring_object_property where entity_id = old.id);

                        end if;

                        RETURN NEW;
                        END;
                        $function$
                        ;
        </sql>
    </changeSet>

</databaseChangeLog>